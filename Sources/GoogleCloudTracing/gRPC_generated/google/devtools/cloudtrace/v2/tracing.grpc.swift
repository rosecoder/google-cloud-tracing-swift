// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/cloudtrace/v2/tracing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

internal enum Google_Devtools_Cloudtrace_V2_TraceService {
    internal static let descriptor = GRPCCore.ServiceDescriptor.google_devtools_cloudtrace_v2_TraceService
    internal enum Method {
        internal enum BatchWriteSpans {
            internal typealias Input = Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Devtools_Cloudtrace_V2_TraceService.descriptor.fullyQualifiedService,
                method: "BatchWriteSpans"
            )
        }
        internal enum CreateSpan {
            internal typealias Input = Google_Devtools_Cloudtrace_V2_Span
            internal typealias Output = Google_Devtools_Cloudtrace_V2_Span
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Devtools_Cloudtrace_V2_TraceService.descriptor.fullyQualifiedService,
                method: "CreateSpan"
            )
        }
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            BatchWriteSpans.descriptor,
            CreateSpan.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias ClientProtocol = Google_Devtools_Cloudtrace_V2_TraceService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias Client = Google_Devtools_Cloudtrace_V2_TraceService_Client
}

extension GRPCCore.ServiceDescriptor {
    internal static let google_devtools_cloudtrace_v2_TraceService = Self(
        package: "google.devtools.cloudtrace.v2",
        service: "TraceService"
    )
}

/// Service for collecting and viewing traces and spans within a trace.
///
/// A trace is a collection of spans corresponding to a single
/// operation or a set of operations in an application.
///
/// A span is an individual timed event which forms a node of the trace tree.
/// A single trace can contain spans from multiple services.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal protocol Google_Devtools_Cloudtrace_V2_TraceService_ClientProtocol: Sendable {
    /// Batch writes new spans to new or existing traces. You cannot update
    /// existing spans.
    func batchWriteSpans<R>(
        request: GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a new span.
    func createSpan<R>(
        request: GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_Span>,
        serializer: some GRPCCore.MessageSerializer<Google_Devtools_Cloudtrace_V2_Span>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Devtools_Cloudtrace_V2_Span>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Devtools_Cloudtrace_V2_Span>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Devtools_Cloudtrace_V2_TraceService.ClientProtocol {
    internal func batchWriteSpans<R>(
        request: GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchWriteSpans(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func createSpan<R>(
        request: GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_Span>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Devtools_Cloudtrace_V2_Span>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createSpan(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Devtools_Cloudtrace_V2_Span>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Devtools_Cloudtrace_V2_Span>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Devtools_Cloudtrace_V2_TraceService.ClientProtocol {
    /// Batch writes new spans to new or existing traces. You cannot update
    /// existing spans.
    internal func batchWriteSpans<Result>(
        _ message: Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchWriteSpans(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a new span.
    internal func createSpan<Result>(
        _ message: Google_Devtools_Cloudtrace_V2_Span,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Devtools_Cloudtrace_V2_Span>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_Span>(
            message: message,
            metadata: metadata
        )
        return try await self.createSpan(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// Service for collecting and viewing traces and spans within a trace.
///
/// A trace is a collection of spans corresponding to a single
/// operation or a set of operations in an application.
///
/// A span is an individual timed event which forms a node of the trace tree.
/// A single trace can contain spans from multiple services.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal struct Google_Devtools_Cloudtrace_V2_TraceService_Client: Google_Devtools_Cloudtrace_V2_TraceService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    internal init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Batch writes new spans to new or existing traces. You cannot update
    /// existing spans.
    internal func batchWriteSpans<R>(
        request: GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Devtools_Cloudtrace_V2_TraceService.Method.BatchWriteSpans.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a new span.
    internal func createSpan<R>(
        request: GRPCCore.ClientRequest<Google_Devtools_Cloudtrace_V2_Span>,
        serializer: some GRPCCore.MessageSerializer<Google_Devtools_Cloudtrace_V2_Span>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Devtools_Cloudtrace_V2_Span>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Devtools_Cloudtrace_V2_Span>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Devtools_Cloudtrace_V2_TraceService.Method.CreateSpan.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
